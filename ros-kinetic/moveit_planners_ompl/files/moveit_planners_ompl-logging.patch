diff -u -r a/ompl_interface/src/constraints_library.cpp b/ompl_interface/src/constraints_library.cpp
--- a/ompl_interface/src/constraints_library.cpp	2017-12-25 17:56:15.000000000 +0000
+++ b/ompl_interface/src/constraints_library.cpp	2018-03-09 09:37:04.661983865 +0000
@@ -270,11 +270,11 @@
   std::ifstream fin((path + "/manifest").c_str());
   if (!fin.good())
   {
-    logWarn("Manifest not found in folder '%s'. Not loading constraint approximations.", path.c_str());
+    CONSOLE_BRIDGE_logWarn("Manifest not found in folder '%s'. Not loading constraint approximations.", path.c_str());
     return;
   }
 
-  logInform("Loading constrained space approximations from '%s'...", path.c_str());
+  CONSOLE_BRIDGE_logInform("Loading constrained space approximations from '%s'...", path.c_str());
 
   while (fin.good() && !fin.eof())
   {
@@ -297,7 +297,7 @@
     if (fin.eof())
       break;
     fin >> filename;
-    logInform("Loading constraint approximation of type '%s' for group '%s' from '%s'...",
+    CONSOLE_BRIDGE_logInform("Loading constraint approximation of type '%s' for group '%s' from '%s'...",
               state_space_parameterization.c_str(), group.c_str(), filename.c_str());
     const ModelBasedPlanningContextPtr& pc = context_manager_.getPlanningContext(group, state_space_parameterization);
     if (pc)
@@ -311,22 +311,22 @@
                                                                  msg, filename, ompl::base::StateStoragePtr(cass),
                                                                  milestones));
       if (constraint_approximations_.find(cap->getName()) != constraint_approximations_.end())
-        logWarn("Overwriting constraint approximation named '%s'", cap->getName().c_str());
+        CONSOLE_BRIDGE_logWarn("Overwriting constraint approximation named '%s'", cap->getName().c_str());
       constraint_approximations_[cap->getName()] = cap;
       std::size_t sum = 0;
       for (std::size_t i = 0; i < cass->size(); ++i)
         sum += cass->getMetadata(i).first.size();
-      logInform("Loaded %lu states (%lu milestones) and %lu connections (%0.1lf per state) for constraint named '%s'%s",
+      CONSOLE_BRIDGE_logInform("Loaded %lu states (%lu milestones) and %lu connections (%0.1lf per state) for constraint named '%s'%s",
                 cass->size(), cap->getMilestoneCount(), sum, (double)sum / (double)cap->getMilestoneCount(),
                 msg.name.c_str(), explicit_motions ? ". Explicit motions included." : "");
     }
   }
-  logInform("Done loading constrained space approximations.");
+  CONSOLE_BRIDGE_logInform("Done loading constrained space approximations.");
 }
 
 void ompl_interface::ConstraintsLibrary::saveConstraintApproximations(const std::string& path)
 {
-  logInform("Saving %u constrained space approximations to '%s'", (unsigned int)constraint_approximations_.size(),
+  CONSOLE_BRIDGE_logInform("Saving %u constrained space approximations to '%s'", (unsigned int)constraint_approximations_.size(),
             path.c_str());
   try
   {
@@ -353,7 +353,7 @@
         it->second->getStateStorage()->store((path + "/" + it->second->getFilename()).c_str());
     }
   else
-    logError("Unable to save constraint approximation to '%s'", path.c_str());
+    CONSOLE_BRIDGE_logError("Unable to save constraint approximation to '%s'", path.c_str());
   fout.close();
 }
 
@@ -411,7 +411,7 @@
 
     ros::WallTime start = ros::WallTime::now();
     ompl::base::StateStoragePtr ss = constructConstraintApproximation(pc, constr_sampling, constr_hard, options, res);
-    logInform("Spent %lf seconds constructing the database", (ros::WallTime::now() - start).toSec());
+    CONSOLE_BRIDGE_logInform("Spent %lf seconds constructing the database", (ros::WallTime::now() - start).toSec());
     if (ss)
     {
       ConstraintApproximationPtr ca(new ConstraintApproximation(
@@ -420,12 +420,12 @@
               ".ompldb",
           ss, res.milestones));
       if (constraint_approximations_.find(ca->getName()) != constraint_approximations_.end())
-        logWarn("Overwriting constraint approximation named '%s'", ca->getName().c_str());
+        CONSOLE_BRIDGE_logWarn("Overwriting constraint approximation named '%s'", ca->getName().c_str());
       constraint_approximations_[ca->getName()] = ca;
       res.approx = ca;
     }
     else
-      logError("Unable to construct constraint approximation for group '%s'", group.c_str());
+      CONSOLE_BRIDGE_logError("Unable to construct constraint approximation for group '%s'", group.c_str());
   }
   return res;
 }
@@ -479,18 +479,18 @@
     if (done != done_now)
     {
       done = done_now;
-      logInform("%d%% complete (kept %0.1lf%% sampled states)", done, 100.0 * (double)sstor->size() / (double)attempts);
+      CONSOLE_BRIDGE_logInform("%d%% complete (kept %0.1lf%% sampled states)", done, 100.0 * (double)sstor->size() / (double)attempts);
     }
 
     if (!slow_warn && attempts > 10 && attempts > sstor->size() * 100)
     {
       slow_warn = true;
-      logWarn("Computation of valid state database is very slow...");
+      CONSOLE_BRIDGE_logWarn("Computation of valid state database is very slow...");
     }
 
     if (attempts > options.samples && sstor->size() == 0)
     {
-      logError("Unable to generate any samples");
+      CONSOLE_BRIDGE_logError("Unable to generate any samples");
       break;
     }
 
@@ -507,17 +507,17 @@
   }
 
   result.state_sampling_time = ompl::time::seconds(ompl::time::now() - start);
-  logInform("Generated %u states in %lf seconds", (unsigned int)sstor->size(), result.state_sampling_time);
+  CONSOLE_BRIDGE_logInform("Generated %u states in %lf seconds", (unsigned int)sstor->size(), result.state_sampling_time);
   if (csmp)
   {
     result.sampling_success_rate = csmp->getConstrainedSamplingRate();
-    logInform("Constrained sampling rate: %lf", result.sampling_success_rate);
+    CONSOLE_BRIDGE_logInform("Constrained sampling rate: %lf", result.sampling_success_rate);
   }
 
   result.milestones = sstor->size();
   if (options.edges_per_sample > 0)
   {
-    logInform("Computing graph connections (max %u edges per sample) ...", options.edges_per_sample);
+    CONSOLE_BRIDGE_logInform("Computing graph connections (max %u edges per sample) ...", options.edges_per_sample);
 
     // construct connexions
     const ob::StateSpacePtr& space = pcontext->getOMPLSimpleSetup()->getStateSpace();
@@ -535,7 +535,7 @@
       if (done != done_now)
       {
         done = done_now;
-        logInform("%d%% complete", done);
+        CONSOLE_BRIDGE_logInform("%d%% complete", done);
       }
       if (cass->getMetadata(j).first.size() >= options.edges_per_sample)
         continue;
@@ -592,7 +592,7 @@
     }
 
     result.state_connection_time = ompl::time::seconds(ompl::time::now() - start);
-    logInform("Computed possible connexions in %lf seconds. Added %d connexions", result.state_connection_time, good);
+    CONSOLE_BRIDGE_logInform("Computed possible connexions in %lf seconds. Added %d connexions", result.state_connection_time, good);
     pcontext->getOMPLSimpleSetup()->getSpaceInformation()->freeStates(int_states);
 
     return sstor;
diff -u -r a/ompl_interface/src/detail/constrained_goal_sampler.cpp b/ompl_interface/src/detail/constrained_goal_sampler.cpp
--- a/ompl_interface/src/detail/constrained_goal_sampler.cpp	2017-12-25 17:56:15.000000000 +0000
+++ b/ompl_interface/src/detail/constrained_goal_sampler.cpp	2018-03-09 09:37:04.662983865 +0000
@@ -54,7 +54,7 @@
 {
   if (!constraint_sampler_)
     default_sampler_ = si_->allocStateSampler();
-  logDebug("Constructed a ConstrainedGoalSampler instance at address %p", this);
+  CONSOLE_BRIDGE_logDebug("Constructed a ConstrainedGoalSampler instance at address %p", this);
   startSampling();
 }
 
@@ -134,7 +134,7 @@
           if (!warned_invalid_samples_ && invalid_sampled_constraints_ >= (attempts_so_far * 8) / 10)
           {
             warned_invalid_samples_ = true;
-            logWarn("More than 80%% of the sampled goal states fail to satisfy the constraints imposed on the goal "
+            CONSOLE_BRIDGE_logWarn("More than 80%% of the sampled goal states fail to satisfy the constraints imposed on the goal "
                     "sampler. Is the constrained sampler working correctly?");
           }
         }
diff -u -r a/ompl_interface/src/detail/constrained_valid_state_sampler.cpp b/ompl_interface/src/detail/constrained_valid_state_sampler.cpp
--- a/ompl_interface/src/detail/constrained_valid_state_sampler.cpp	2017-12-25 17:56:15.000000000 +0000
+++ b/ompl_interface/src/detail/constrained_valid_state_sampler.cpp	2018-03-09 09:37:04.662983865 +0000
@@ -50,7 +50,7 @@
   if (!constraint_sampler_)
     default_sampler_ = si_->allocStateSampler();
   inv_dim_ = si_->getStateSpace()->getDimension() > 0 ? 1.0 / (double)si_->getStateSpace()->getDimension() : 1.0;
-  logDebug("Constructed a ValidConstrainedSampler instance at address %p", this);
+  CONSOLE_BRIDGE_logDebug("Constructed a ValidConstrainedSampler instance at address %p", this);
 }
 
 bool ompl_interface::ValidConstrainedSampler::project(ompl::base::State* state)
diff -u -r a/ompl_interface/src/detail/state_validity_checker.cpp b/ompl_interface/src/detail/state_validity_checker.cpp
--- a/ompl_interface/src/detail/state_validity_checker.cpp	2017-12-25 17:56:15.000000000 +0000
+++ b/ompl_interface/src/detail/state_validity_checker.cpp	2018-03-09 09:37:04.662983865 +0000
@@ -116,7 +116,7 @@
   if (!si_->satisfiesBounds(state))
   {
     if (verbose)
-      logInform("State outside bounds");
+      CONSOLE_BRIDGE_logInform("State outside bounds");
     return false;
   }
 
@@ -146,7 +146,7 @@
   if (!si_->satisfiesBounds(state))
   {
     if (verbose)
-      logInform("State outside bounds");
+      CONSOLE_BRIDGE_logInform("State outside bounds");
     return false;
   }
 
@@ -188,7 +188,7 @@
   if (!si_->satisfiesBounds(state))
   {
     if (verbose)
-      logInform("State outside bounds");
+      CONSOLE_BRIDGE_logInform("State outside bounds");
     const_cast<ob::State*>(state)->as<ModelBasedStateSpace::StateType>()->markInvalid();
     return false;
   }
@@ -240,7 +240,7 @@
   if (!si_->satisfiesBounds(state))
   {
     if (verbose)
-      logInform("State outside bounds");
+      CONSOLE_BRIDGE_logInform("State outside bounds");
     const_cast<ob::State*>(state)->as<ModelBasedStateSpace::StateType>()->markInvalid(0.0);
     return false;
   }
diff -u -r a/ompl_interface/src/model_based_planning_context.cpp b/ompl_interface/src/model_based_planning_context.cpp
--- a/ompl_interface/src/model_based_planning_context.cpp	2017-12-25 17:56:15.000000000 +0000
+++ b/ompl_interface/src/model_based_planning_context.cpp	2018-03-09 09:37:04.660983865 +0000
@@ -89,7 +89,7 @@
 {
   if (!spec_.state_space_)
   {
-    logError("No state space is configured yet");
+    CONSOLE_BRIDGE_logError("No state space is configured yet");
     return;
   }
   ob::ProjectionEvaluatorPtr pe = getProjectionEvaluator(peval);
@@ -106,7 +106,7 @@
     if (getRobotModel()->hasLinkModel(link_name))
       return ob::ProjectionEvaluatorPtr(new ProjectionEvaluatorLinkPose(this, link_name));
     else
-      logError("Attempted to set projection evaluator with respect to position of link '%s', but that link is not "
+      CONSOLE_BRIDGE_logError("Attempted to set projection evaluator with respect to position of link '%s', but that link is not "
                "known to the kinematic model.",
                link_name.c_str());
   }
@@ -130,20 +130,20 @@
             j.push_back(idx + q);
         }
         else
-          logWarn("%s: Ignoring joint '%s' in projection since it has 0 DOF", name_.c_str(), v.c_str());
+          CONSOLE_BRIDGE_logWarn("%s: Ignoring joint '%s' in projection since it has 0 DOF", name_.c_str(), v.c_str());
       }
       else
-        logError("%s: Attempted to set projection evaluator with respect to value of joint '%s', but that joint is not "
+        CONSOLE_BRIDGE_logError("%s: Attempted to set projection evaluator with respect to value of joint '%s', but that joint is not "
                  "known to the group '%s'.",
                  name_.c_str(), v.c_str(), getGroupName().c_str());
     }
     if (j.empty())
-      logError("%s: No valid joints specified for joint projection", name_.c_str());
+      CONSOLE_BRIDGE_logError("%s: No valid joints specified for joint projection", name_.c_str());
     else
       return ob::ProjectionEvaluatorPtr(new ProjectionEvaluatorJointValue(this, j));
   }
   else
-    logError("Unable to allocate projection evaluator based on description: '%s'", peval.c_str());
+    CONSOLE_BRIDGE_logError("Unable to allocate projection evaluator based on description: '%s'", peval.c_str());
   return ob::ProjectionEvaluatorPtr();
 }
 
@@ -152,11 +152,11 @@
 {
   if (spec_.state_space_.get() != ss)
   {
-    logError("%s: Attempted to allocate a state sampler for an unknown state space", name_.c_str());
+    CONSOLE_BRIDGE_logError("%s: Attempted to allocate a state sampler for an unknown state space", name_.c_str());
     return ompl::base::StateSamplerPtr();
   }
 
-  logDebug("%s: Allocating a new state sampler (attempts to use path constraints)", name_.c_str());
+  CONSOLE_BRIDGE_logDebug("%s: Allocating a new state sampler (attempts to use path constraints)", name_.c_str());
 
   if (path_constraints_)
   {
@@ -172,7 +172,7 @@
           ompl::base::StateSamplerPtr res = c_ssa(ss);
           if (res)
           {
-            logInform("%s: Using precomputed state sampler (approximated constraint space) for constraint '%s'",
+            CONSOLE_BRIDGE_logInform("%s: Using precomputed state sampler (approximated constraint space) for constraint '%s'",
                       name_.c_str(), path_constraints_msg_.name.c_str());
             return res;
           }
@@ -187,11 +187,11 @@
 
     if (cs)
     {
-      logInform("%s: Allocating specialized state sampler for state space", name_.c_str());
+      CONSOLE_BRIDGE_logInform("%s: Allocating specialized state sampler for state space", name_.c_str());
       return ob::StateSamplerPtr(new ConstrainedSampler(this, cs));
     }
   }
-  logDebug("%s: Allocating default state sampler for state space", name_.c_str());
+  CONSOLE_BRIDGE_logDebug("%s: Allocating default state sampler for state space", name_.c_str());
   return ss->allocDefaultStateSampler();
 }
 
@@ -210,7 +210,7 @@
     if (ca)
     {
       getOMPLStateSpace()->setInterpolationFunction(ca->getInterpolationFunction());
-      logInform("Using precomputed interpolation states");
+      CONSOLE_BRIDGE_logInform("Using precomputed interpolation states");
     }
   }
 
@@ -243,7 +243,7 @@
   if (it == cfg.end())
   {
     optimizer = "PathLengthOptimizationObjective";
-    logDebug("No optimization objective specified, defaulting to %s", optimizer.c_str());
+    CONSOLE_BRIDGE_logDebug("No optimization objective specified, defaulting to %s", optimizer.c_str());
   }
   else
   {
@@ -283,7 +283,7 @@
   if (it == cfg.end())
   {
     if (name_ != getGroupName())
-      logWarn("%s: Attribute 'type' not specified in planner configuration", name_.c_str());
+      CONSOLE_BRIDGE_logWarn("%s: Attribute 'type' not specified in planner configuration", name_.c_str());
   }
   else
   {
@@ -291,7 +291,7 @@
     cfg.erase(it);
     ompl_simple_setup_->setPlannerAllocator(
         boost::bind(spec_.planner_selector_(type), _1, name_ != getGroupName() ? name_ : "", spec_));
-    logInform("Planner configuration '%s' will use planner '%s'. Additional configuration parameters will be set when "
+    CONSOLE_BRIDGE_logInform("Planner configuration '%s' will use planner '%s'. Additional configuration parameters will be set when "
               "the planner is constructed.",
               name_.c_str(), type.c_str());
   }
@@ -308,9 +308,9 @@
   if (wparams.min_corner.x == wparams.max_corner.x && wparams.min_corner.x == 0.0 &&
       wparams.min_corner.y == wparams.max_corner.y && wparams.min_corner.y == 0.0 &&
       wparams.min_corner.z == wparams.max_corner.z && wparams.min_corner.z == 0.0)
-    logWarn("It looks like the planning volume was not specified.");
+    CONSOLE_BRIDGE_logWarn("It looks like the planning volume was not specified.");
 
-  logDebug("%s: Setting planning volume (affects SE2 & SE3 joints only) to x = [%f, %f], y = [%f, %f], z = [%f, %f]",
+  CONSOLE_BRIDGE_logDebug("%s: Setting planning volume (affects SE2 & SE3 joints only) to x = [%f, %f], y = [%f, %f], z = [%f, %f]",
            name_.c_str(), wparams.min_corner.x, wparams.max_corner.x, wparams.min_corner.y, wparams.max_corner.y,
            wparams.min_corner.z, wparams.max_corner.z);
 
@@ -381,7 +381,7 @@
   if (!goals.empty())
     return goals.size() == 1 ? goals[0] : ompl::base::GoalPtr(new GoalSampleableRegionMux(goals));
   else
-    logError("Unable to construct goal representation");
+    CONSOLE_BRIDGE_logError("Unable to construct goal representation");
 
   return ob::GoalPtr();
 }
@@ -433,7 +433,7 @@
 
   if (goal_constraints_.empty())
   {
-    logWarn("%s: No goal constraints specified. There is no problem to solve.", name_.c_str());
+    CONSOLE_BRIDGE_logWarn("%s: No goal constraints specified. There is no problem to solve.", name_.c_str());
     if (error)
       error->val = moveit_msgs::MoveItErrorCodes::INVALID_GOAL_CONSTRAINTS;
     return false;
@@ -501,10 +501,10 @@
   stopSampling();
   int v = ompl_simple_setup_->getSpaceInformation()->getMotionValidator()->getValidMotionCount();
   int iv = ompl_simple_setup_->getSpaceInformation()->getMotionValidator()->getInvalidMotionCount();
-  logDebug("There were %d valid motions and %d invalid motions.", v, iv);
+  CONSOLE_BRIDGE_logDebug("There were %d valid motions and %d invalid motions.", v, iv);
 
   if (ompl_simple_setup_->getProblemDefinition()->hasApproximateSolution())
-    logWarn("Computed solution is approximate");
+    CONSOLE_BRIDGE_logWarn("Computed solution is approximate");
 }
 
 bool ompl_interface::ModelBasedPlanningContext::solve(planning_interface::MotionPlanResponse& res)
@@ -520,7 +520,7 @@
     interpolateSolution();
 
     // fill the response
-    logDebug("%s: Returning successful solution with %lu states", getName().c_str(),
+    CONSOLE_BRIDGE_logDebug("%s: Returning successful solution with %lu states", getName().c_str(),
              getOMPLSimpleSetup()->getSolutionPath().getStateCount());
 
     res.trajectory_.reset(new robot_trajectory::RobotTrajectory(getRobotModel(), getGroupName()));
@@ -530,7 +530,7 @@
   }
   else
   {
-    logInform("Unable to solve the planning problem");
+    CONSOLE_BRIDGE_logInform("Unable to solve the planning problem");
     res.error_code_.val = moveit_msgs::MoveItErrorCodes::PLANNING_FAILED;
     return false;
   }
@@ -570,13 +570,13 @@
     getSolutionPath(*res.trajectory_.back());
 
     // fill the response
-    logDebug("%s: Returning successful solution with %lu states", getName().c_str(),
+    CONSOLE_BRIDGE_logDebug("%s: Returning successful solution with %lu states", getName().c_str(),
              getOMPLSimpleSetup()->getSolutionPath().getStateCount());
     return true;
   }
   else
   {
-    logInform("Unable to solve the planning problem");
+    CONSOLE_BRIDGE_logInform("Unable to solve the planning problem");
     res.error_code_.val = moveit_msgs::MoveItErrorCodes::PLANNING_FAILED;
     return false;
   }
@@ -591,7 +591,7 @@
   bool result = false;
   if (count <= 1)
   {
-    logDebug("%s: Solving the planning problem once...", name_.c_str());
+    CONSOLE_BRIDGE_logDebug("%s: Solving the planning problem once...", name_.c_str());
     ob::PlannerTerminationCondition ptc =
         ob::timedPlannerTerminationCondition(timeout - ompl::time::seconds(ompl::time::now() - start));
     registerTerminationCondition(ptc);
@@ -601,7 +601,7 @@
   }
   else
   {
-    logDebug("%s: Solving the planning problem %u times...", name_.c_str(), count);
+    CONSOLE_BRIDGE_logDebug("%s: Solving the planning problem %u times...", name_.c_str(), count);
     ompl_parallel_plan_.clearHybridizationPaths();
     if (count <= max_planning_threads_)
     {
diff -u -r a/ompl_interface/src/parameterization/model_based_state_space.cpp b/ompl_interface/src/parameterization/model_based_state_space.cpp
--- a/ompl_interface/src/parameterization/model_based_state_space.cpp	2017-12-25 17:56:15.000000000 +0000
+++ b/ompl_interface/src/parameterization/model_based_state_space.cpp	2018-03-09 09:37:04.659983865 +0000
@@ -49,7 +49,7 @@
   // make sure we have bounds for every joint stored within the spec (use default bounds if not specified)
   if (!spec_.joint_bounds_.empty() && spec_.joint_bounds_.size() != joint_model_vector_.size())
   {
-    logError("Joint group '%s' has incorrect bounds specified. Using the default bounds instead.",
+    CONSOLE_BRIDGE_logError("Joint group '%s' has incorrect bounds specified. Using the default bounds instead.",
              spec_.joint_model_group_->getName().c_str());
     spec_.joint_bounds_.clear();
   }
@@ -86,7 +86,7 @@
 void ompl_interface::ModelBasedStateSpace::setTagSnapToSegment(double snap)
 {
   if (snap < 0.0 || snap > 1.0)
-    logWarn("Snap to segment for tags is a ratio. It's value must be between 0.0 and 1.0. Value remains as previously "
+    CONSOLE_BRIDGE_logWarn("Snap to segment for tags is a ratio. It's value must be between 0.0 and 1.0. Value remains as previously "
             "set (%lf)",
             tag_snap_to_segment_);
   else
diff -u -r a/ompl_interface/src/parameterization/work_space/pose_model_state_space.cpp b/ompl_interface/src/parameterization/work_space/pose_model_state_space.cpp
--- a/ompl_interface/src/parameterization/work_space/pose_model_state_space.cpp	2017-12-25 17:56:15.000000000 +0000
+++ b/ompl_interface/src/parameterization/work_space/pose_model_state_space.cpp	2018-03-09 09:37:04.658983865 +0000
@@ -54,7 +54,7 @@
       poses_.push_back(PoseComponent(it->first, it->second));
   }
   if (poses_.empty())
-    logError("No kinematics solvers specified. Unable to construct a PoseModelStateSpace");
+    CONSOLE_BRIDGE_logError("No kinematics solvers specified. Unable to construct a PoseModelStateSpace");
   else
     std::sort(poses_.begin(), poses_.end());
   setName(getName() + "_" + PARAMETERIZATION_TYPE);
diff -u -r a/ompl_interface/src/planning_context_manager.cpp b/ompl_interface/src/planning_context_manager.cpp
--- a/ompl_interface/src/planning_context_manager.cpp	2017-12-25 17:56:15.000000000 +0000
+++ b/ompl_interface/src/planning_context_manager.cpp	2018-03-09 09:37:04.663983865 +0000
@@ -154,7 +154,7 @@
     return it->second;
   else
   {
-    logError("Unknown planner: '%s'", planner.c_str());
+    CONSOLE_BRIDGE_logError("Unknown planner: '%s'", planner.c_str());
     return ConfiguredPlannerAllocator();
   }
 }
@@ -217,7 +217,7 @@
   }
   else
   {
-    logError("Planning configuration '%s' was not found", config.c_str());
+    CONSOLE_BRIDGE_logError("Planning configuration '%s' was not found", config.c_str());
     return ModelBasedPlanningContextPtr();
   }
 }
@@ -240,7 +240,7 @@
       for (std::size_t i = 0; i < cc->second.size(); ++i)
         if (cc->second[i].unique())
         {
-          logDebug("Reusing cached planning context");
+          CONSOLE_BRIDGE_logDebug("Reusing cached planning context");
           context = cc->second[i];
           break;
         }
@@ -279,7 +279,7 @@
       }
     }
 
-    logDebug("Creating new planning context");
+    CONSOLE_BRIDGE_logDebug("Creating new planning context");
     context.reset(new ModelBasedPlanningContext(config.name, context_spec));
     context->useStateValidityCache(state_validity_cache);
     {
@@ -314,7 +314,7 @@
     return f->second;
   else
   {
-    logError("Factory of type '%s' was not found", factory_type.c_str());
+    CONSOLE_BRIDGE_logError("Factory of type '%s' was not found", factory_type.c_str());
     static const ModelBasedStateSpaceFactoryPtr empty;
     return empty;
   }
@@ -340,13 +340,13 @@
 
   if (best == state_space_factories_.end())
   {
-    logError("There are no known state spaces that can represent the given planning problem");
+    CONSOLE_BRIDGE_logError("There are no known state spaces that can represent the given planning problem");
     static const ModelBasedStateSpaceFactoryPtr empty;
     return empty;
   }
   else
   {
-    logDebug("Using '%s' parameterization for solving problem", best->first.c_str());
+    CONSOLE_BRIDGE_logDebug("Using '%s' parameterization for solving problem", best->first.c_str());
     return best->second;
   }
 }
@@ -357,7 +357,7 @@
 {
   if (req.group_name.empty())
   {
-    logError("No group specified to plan for");
+    CONSOLE_BRIDGE_logError("No group specified to plan for");
     error_code.val = moveit_msgs::MoveItErrorCodes::INVALID_GROUP_NAME;
     return ModelBasedPlanningContextPtr();
   }
@@ -366,7 +366,7 @@
 
   if (!planning_scene)
   {
-    logError("No planning scene supplied as input");
+    CONSOLE_BRIDGE_logError("No planning scene supplied as input");
     return ModelBasedPlanningContextPtr();
   }
 
@@ -378,7 +378,7 @@
                                    req.group_name + "[" + req.planner_id + "]" :
                                    req.planner_id);
     if (pc == planner_configs_.end())
-      logWarn("Cannot find planning configuration for group '%s' using planner '%s'. Will use defaults instead.",
+      CONSOLE_BRIDGE_logWarn("Cannot find planning configuration for group '%s' using planner '%s'. Will use defaults instead.",
               req.group_name.c_str(), req.planner_id.c_str());
   }
 
@@ -387,7 +387,7 @@
     pc = planner_configs_.find(req.group_name);
     if (pc == planner_configs_.end())
     {
-      logError("Cannot find planning configuration for group '%s'", req.group_name.c_str());
+      CONSOLE_BRIDGE_logError("Cannot find planning configuration for group '%s'", req.group_name.c_str());
       return ModelBasedPlanningContextPtr();
     }
   }
@@ -431,12 +431,12 @@
     try
     {
       context->configure();
-      logDebug("%s: New planning context is set.", context->getName().c_str());
+      CONSOLE_BRIDGE_logDebug("%s: New planning context is set.", context->getName().c_str());
       error_code.val = moveit_msgs::MoveItErrorCodes::SUCCESS;
     }
     catch (ompl::Exception& ex)
     {
-      logError("OMPL encountered an error: %s", ex.what());
+      CONSOLE_BRIDGE_logError("OMPL encountered an error: %s", ex.what());
       context.reset();
     }
   }
diff -u -r a/ompl_interface/test/test_state_space.cpp b/ompl_interface/test/test_state_space.cpp
--- a/ompl_interface/test/test_state_space.cpp	2017-12-25 17:56:15.000000000 +0000
+++ b/ompl_interface/test/test_state_space.cpp	2018-03-09 09:37:04.664983865 +0000
@@ -99,7 +99,7 @@
   }
   catch (ompl::Exception& ex)
   {
-    logError("Sanity checks did not pass: %s", ex.what());
+    CONSOLE_BRIDGE_logError("Sanity checks did not pass: %s", ex.what());
   }
   EXPECT_TRUE(passed);
 }
@@ -142,7 +142,7 @@
   }
   catch (ompl::Exception& ex)
   {
-    logError("Sanity checks did not pass: %s", ex.what());
+    CONSOLE_BRIDGE_logError("Sanity checks did not pass: %s", ex.what());
   }
   EXPECT_TRUE(passed);
 
